#user topodp;
user root;
worker_processes 4;

#worker_processes auto;
#worker_cpu_affinity auto;
error_log logs/error-https.log info;
pid        logs/nginx-https.pid;
events {
    use epoll;
    worker_connections  5000;
}

http {
    include mime.types;
    default_type application/octet-stream;

    server {
        listen 0.0.0.0:61935;
        listen [::]:61935;
        include custom-error-page.conf;

        # per-worker listener
        # 1st worker will listen 62380
        # 2nd worker will listen 62381
        # 3rd worker will listen 62382
        # .....
        listen 127.0.0.1:62380 per_worker;

		server_name  *.*.*.*;

		error_page 497 http://$server_name:$server_port$request_uri;
        proxy_set_header   Host             $http_host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Scheme $scheme;
        proxy_redirect http:// $scheme://;
        port_in_redirect on;
		proxy_read_timeout 1200;

		proxy_intercept_errors on;
        proxy_hide_header Server;

        index index.jsp index.action index.htm index.html;

		location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat1 {
            proxy_pass http://localhost:62380/stat ;
        }

        location /stat2 {
            proxy_pass http://localhost:62381/stat ;
        }

        location /stat3 {
            proxy_pass http://localhost:62382/stat ;
        }

        location /stat4 {
            proxy_pass http://localhost:62383/stat ;
        }

        location /stat.xsl {
            root html;
        }

        location /control {
            rtmp_control all;
        }

        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
        }

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }

        location /live {
            flv_live on; #打开 HTTP 播放 FLV 直播流功能
            #chunked_transfer_encoding on; #支持 'Transfer-Encoding: chunked' 方式回复
            chunked_transfer_encoding off;

            add_header 'Access-Control-Allow-Origin' '*'; #添加额外的 HTTP 头
            add_header 'Access-Control-Allow-Credentials' 'true'; #添加额外的 HTTP 头
        }

        location ~\.mp3$ {
             flv;
        }
        location ~\.mp4$ {
             mp4;
        }
        location ~\.bak$ {
             flv;
        }

        #location / {       #限制相应目录
        #location ~ .*\.(7z|iso|msi|tar|zip|rar|gz|exe|mp4)$ {        #或限制相应文件
        #    accesskey             on;
        #    accesskey_hashmethod  md5;
        #    accesskey_arg         "key";
        #    accesskey_signature   "pass$remote_addr";      #pass为干扰码，可自定义修改
        #}
	}
}


rtmp_auto_push on;
rtmp_auto_push_reconnect 1s;
rtmp_socket_dir /tmp;

rtmp {
    out_queue           4096;
    out_cork            8;
    max_streams         128;
    timeout             15s;
    drop_idle_publisher 15s;


    log_interval 5s; #log 模块在 access.log 中记录日志的间隔时间，对调试非常有用
    log_size     1m; #log 模块用来记录日志的缓冲区大小

    server {
        listen 1935;
        server_name *.*.*.*; #用于虚拟主机名后缀通配
        access_log logs/rtmp_audit.log info;

        application live {
            live on;
            gop_cache on; #打开 GOP 缓存，减少首屏等待时间

        }

        application hls {
            live on;
            hls on;
            hls_path /tmp/hls;
        }

        application dash {
            live on;
            dash on;
            dash_path /tmp/dash;
        }
    }

}